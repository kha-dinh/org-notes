:PROPERTIES:
:ID:       216535ed-b19c-42d8-af06-119f9c5f421f
:END:
#+title: DataShield: Configurable Data Confidentiality and Integrity

* Info
Submitted toASIA CCS '17
Authors: Scott A. Carr & [[id:822ddb9a-004e-4489-9d0a-d054148800f1][Mathias Payer]]
* Summary
The paper introduces a property called Data Confidentiality and Integrity (DCI).
It's one [[id:21019586-ca97-4a8d-bcd8-788f565fc5eb][Security Policy]] that provides [[id:f84adbd3-6db6-4651-bd29-bdfb1534065c][Defenses Against Memory Corruption]], but
focus on only protecting a set of annotated data types.

[[id:20b040ae-e8c2-4326-8c12-cc12d28cb1a2][Non-control Data Attacks]] are one of the motivation for the paper.

DCI's particular policy is:
1. Pointers to sensitive data have complete [[id:fdbace7f-32d7-4501-bd97-56ebbad2c365][Memory Safety]]. That is, it must
   point to the valid location in a designated memory object. This is obtained
   by fine-grained [[id:fa351c2a-1a4d-48d8-9d6d-a1b46c4989b5][Bounds Checking]].
2. Pointers of non-sensitive data is sandboxed using [[id:245b4493-5359-437d-88bd-f0dc7288b7bc][Software Fault Isolation
   (SFI)]] so that it cannot point to sensitive memory objects.
3. No data flow between non-sensitive and sensitive data. To get this, every
   flow from non-sensitive to sensitive must also be marked as sensitive using
   [[id:19d7a9ab-1f71-4812-84b9-a9624e6c40e1][Taint Analysis]].


* Notes
The paper will propagate the sensitivity to all operands of a sensitive
variable. But this is fine and does not increase the TCB because all sensitive
variables will have memory safety anyway. The only problem is in the performance cause by *Overtainting*.


It is more like a limiting mechanism to limit the overhead of complete [[id:fdbace7f-32d7-4501-bd97-56ebbad2c365][Memory
Safety]], not a method for [[id:2921cb35-237c-4918-b3c0-1e94c1c983a8][Privilege Separation]].
