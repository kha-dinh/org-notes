:PROPERTIES:
:ID:       68765dae-6c9b-4a62-bb7f-ab17723a59b9
:END:
#+title: Annotating, Tracking, and Protecting Cryptographic Secrets with CryptoMPK
#+filetags: :compiler:paper-notes:

* Summary
This paper use [[id:68bbc446-f046-4df6-b1ed-ba11681a742a][Static Analysis (Source Code Analysis)]] to partition the source
code into crypto and non-crypto domains. The crypto domain is protected with
[[id:027687ec-a1ba-4d7d-8c56-de4e17cc6e1d][Intel MPK]]. Switches between the domains is automatically inserted. Stack and
heap allocations is replaced with a customized implementation

The paper points out that crypto operations have interesting properties.
1. Modern cryptographic operations, on top of the secret keys, use a lot of
   *intermediate values* such as buffers and runtime data. Those data also need to
   be protected, but often overlooked by most mechanisms.
2. Cryptographic operation have data flow that declassify the information. For
   instance, ciphertext have data flow from the key, but is considered
   non-confidential. Traditional [[id:19d7a9ab-1f71-4812-84b9-a9624e6c40e1][Taint Analysis]] ([[id:216535ed-b19c-42d8-af06-119f9c5f421f][DataShield: Configurable Data
   Confidentiality and Integrity]]) would over-taint them (making ciphertext also
   tainted), thus:
   1. Have more performance overhead
   2. Increase the TCB

* Overview
The paper define crypto buffer and crypto operations, then use [[id:68bbc446-f046-4df6-b1ed-ba11681a742a][Static Analysis
(Source Code Analysis)]] to automatically determine crypto buffers and crypto
operations from the initial list of operations. This is somewhat simlilar to
several works that use [[id:19d7a9ab-1f71-4812-84b9-a9624e6c40e1][Taint Analysis]] to propagate secret variables
([[id:5858d065-e920-48c1-9b26-f3fc071a9bf2][PtrSplit]],[[id:216535ed-b19c-42d8-af06-119f9c5f421f][DataShield: Configurable Data Confidentiality and Integrity]] )
** Crypto buffer and crypto operations
+ *Crypto buffer:* memory regions that contains the secret key, or the
  intermediate results of cryptographic computations
+ *Crypto operations:* Operations/instructions that can access the crypto buffers.
  For example, a memory read instruction to the AES key.

** Overview
+ *Pre-analysis*: Compile the program that contain the annotation into [[id:8c4d5b4c-4f13-48ae-a4af-13c3d5cbc11e][LLVM IR]]
+ *Crypto buffer labeling*: Use [[id:61be9235-539c-4b30-83af-5bc06bbced35][Points-to Analysis]] and [[id:19d7a9ab-1f71-4812-84b9-a9624e6c40e1][Taint Analysis]] to
  label crypto buffers.
+ *Crypto operations identification*: Identify memory accesses and operations
  that access the crypto buffers
+ *Code transformation*:
  1. Move crypto buffers into protected memory regions
  2. Replicate functions to be protected (why?)
  3. Partition program into crypto domain and non-crypto domain
  4. Instrument switches when crossing boundary
  5. Additional binary security checks

* Crypto buffer labeling
The labeling of crypto buffers is similar to that of [[id:19d7a9ab-1f71-4812-84b9-a9624e6c40e1][Taint Analysis]]. The
developer have to annotate which values (in this case only the pointers?) are
sensitive (the encryption key or private key). CryptoMPK use the inital
annotation as the taint source, and propagate the taint through data flow. The
taint here is called the "crypto" tag.

** Pointts-to Analysis
[[id:61be9235-539c-4b30-83af-5bc06bbced35][Points-to Analysis (Pointer Analysis)]] is used to "improve the accuracy of both
control-flow and data-flow construction" (Not sure the implication here).

** Crypto-aware
The paper make the taint analysis "crypto-aware" by allows the developer to
additionally annotate plaintext and ciphertext buffers with the
"multulally-exclusive (mxor)" tag. During taint analysis, when data flow to
those buffer, the crypto tag will be eliminated.

** Context-sensitive analysis
It also uses [[id:ab571a54-a9df-4c41-8c7b-8f100aabd574][Context-sensitive Analysis]] to have different tags for the same
buffer, under different contexts. The reasoning is that one varialbe can have
different sensitivity under different context (calling location). (how?)

* Crypto operations identification
This step identifies which part of the program are allowed to access the crypto
buffers. Those operations are the [[id:8c4d5b4c-4f13-48ae-a4af-13c3d5cbc11e][LLVM IR]] load and store instructions, and the
memory allocation and deallocation operations (malloc).

*Memory access*: When the load and store instruction access the crypto buffer's
address, it is considered a crypto operations

*Memory management:* When the memory allocation and deallocation target the crypto
buffer, it is considered a crypto operation. Then, it create a custom
malloc/free for the crypto context

This is kind of similar to [[id:0fc81ef8-f433-4a84-95b6-9a0b19a48b73][Cali: Compiler-Assisted Library Isolation]], where the
allocation is replaced to use shared memory when needed. However, here, every
different context have different allocation function (context-sensitive), where
each allocation is bound to a different PKEY.

* Code transformation
Finally, after having the crypto buffers and the crypto operations, it
transforms the source code at [[id:8c4d5b4c-4f13-48ae-a4af-13c3d5cbc11e][LLVM IR]] level.

** Memory allocations
Stack and heap allocation is replaced to allocate inside protected memory
(Protected by [[id:027687ec-a1ba-4d7d-8c56-de4e17cc6e1d][Intel MPK]]). For memory allocation wrappers (xreadline in Listing 2
in the paper), it could allocate sensitive or non-sensitive buffer, depending on
the context. For this reason, they replicate any of such function into two
versions.
** Context switches

** Code duplication


* Notes
+ Design and implementation seriously fragment the paper :).
+ Weakness: Only target crypto operations
