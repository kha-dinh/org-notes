:PROPERTIES:
:ID:       e87d9b01-6c61-4114-a671-e79e058b7d3e
:END:
#+title: Intermediate Representations

* Basics
- Is the output of the [[id:6bc87e74-cf9e-4d12-81ff-e979b4107177][Compilers]] Front end. The Middle end then optimize IR, and Back end transform IR into machine/native code.
- IR encodes the compiler's knowledge about the program.
* Types of IR
** Structural IR
+ Graphical oriented
+ Used in source-to-source translators
+ Large in size
  + /examples/: Tree, DAGs, [[id:b42bf23d-1dbf-4b9f-9da7-1a7891d6b45e][Abstract Syntax Tree]]
** Linear IR
+ Simple, compact data structure
+ Easy to arrange
+ /examples/: [[id:583e515b-c277-4a40-9268-8b1d6fa11dc6][Three Address Code]] , stack machine code
** Hybrid IR
+ Combination of graph and linear
+ Useful for optimizations
+ /example/: [[id:9db852f0-600b-481b-a3e3-b46a7332c322][Control Flow Graph (CFG)]]
* TODO DU chain
- Def-Use chain connects definition of variable to all of the uses it may have
- Use-Def chain connects a use of a variable to all of the definitions it may have
* Static Single Assignment (SSA) form
+ Enforce that there is only a single assignment to a variable
+ Is useful in some steps of optimization
+ Is more compact than Def-Use chains
  - No dangling pointers created on dead code elimination
** Translate from Multiple Assignment (MA) to SSA
+ Rename variable to remove multiple assignments
+ Add a pseudo-instruction v=\phi(v1,v2,v...,vn) to join multiple definitions
+ /example/ 
  #+BEGIN_SRC bash
if (A<B) then
  A := 6;
else
  A := 0;
B := A;
# AFTER SSA
if (A<B) then
  A1 := 6;
else
  A2 := 0;
A3 = \phi(A1, A2)
B := A3;
#+END_SRC
** Algorithm for renaming variables
*** Stack algorithm
***
